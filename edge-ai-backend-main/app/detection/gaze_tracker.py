# detection/gaze_tracker.py
import numpy as np
import os
# üîΩ intrusion_detectorÏùò Ìï®ÏàòÎ•º ÏßÅÏ†ë importÌïòÏßÄ ÏïäÏäµÎãàÎã§.
# from app.detection.intrusion_detector import detect_intrusion

# üîΩ Î™®Îç∏ÏùÑ Ï†ÑÏó≠ Î≥ÄÏàòÎ°ú ÏÑ†Ïñ∏Îßå Ìï¥Îë°ÎãàÎã§. (Lazy Loading)
face_mesh = None

def get_face_mesh():
    """MediaPipe FaceMesh Î™®Îç∏ÏùÑ ÌïÑÏöîÌï† Îïå Îî± Ìïú Î≤àÎßå Î°úÎìúÌïòÎäî Ìï®Ïàò"""
    import mediapipe as mp
    global face_mesh
    if face_mesh is None:
        print("[INFO] Loading MediaPipe Face Mesh for gaze tracking...")
        mp_face_mesh = mp.solutions.face_mesh
        face_mesh = mp_face_mesh.FaceMesh(refine_landmarks=True)
    return face_mesh

def get_gaze_status(frame, user_face_path: str, gaze_ref_path: str):
    """APIÎ°úÎ∂ÄÌÑ∞ Î∞õÏùÄ Ïù¥ÎØ∏ÏßÄ ÌîÑÎ†àÏûÑÏúºÎ°ú ÏãúÏÑ† Î∞è Ïπ®ÏûÖ ÏÉÅÌÉúÎ•º Î∂ÑÏÑùÌïòÎäî Ìï®Ïàò"""
    import cv2
    # üîΩ Ìï®Ïàò ÎÇ¥Î∂ÄÏóêÏÑú import Ìï©ÎãàÎã§.
    from app.detection.intrusion_detector import detect_intrusion

    try:
        mesh = get_face_mesh() # üîΩ APIÍ∞Ä Ìò∏Ï∂úÎê† Îïå Î™®Îç∏ Î°úÎìú
        ref_point = np.load(gaze_ref_path) if os.path.exists(gaze_ref_path) else None

        intrusion = detect_intrusion(frame, user_face_path)
        
        rgb_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
        results = mesh.process(rgb_frame)

        # ÏñºÍµ¥Ïù¥ Í∞êÏßÄÎêòÏßÄ ÏïäÏïòÏùÑ ÎïåÏùò Ï≤òÎ¶¨
        if not results.multi_face_landmarks:
            # Ïπ®ÏûÖÏûêÍ∞Ä ÏûàÎã§Î©¥ Ïπ®ÏûÖ ÏÉÅÌÉú Î∞òÌôò, ÏóÜÎã§Î©¥ ÏñºÍµ¥ ÏóÜÏùå ÏÉÅÌÉú Î∞òÌôò
            return "INTRUSION_DETECTED" if intrusion else "NO_FACE_DETECTED", intrusion

        landmarks = results.multi_face_landmarks[0].landmark
        h, w, _ = frame.shape
        
        # ÏãúÏÑ† Í≥ÑÏÇ∞
        left_iris_pos = (landmarks[473].x * w, landmarks[473].y * h)
        right_iris_pos = (landmarks[468].x * w, landmarks[468].y * h)
        eye_center = (np.array(left_iris_pos) + np.array(right_iris_pos)) / 2
        
        is_gaze_forward = True # Í∏∞Î≥∏Í∞íÏùÑ TrueÎ°ú ÏÑ§Ï†ï
        if ref_point is not None:
            distance = np.linalg.norm(eye_center - ref_point)
            if distance > 30: 
                is_gaze_forward = False

        # ÏµúÏ¢Ö ÏÉÅÌÉú Í≤∞Ï†ï
        if intrusion:
            return "INTRUSION_DETECTED", True
        elif not is_gaze_forward:
            return "GAZE_AWAY", False
        else:
            return "USER_FOCUSED", False
            
    except Exception as e:
        print(f"Error during gaze tracking: {e}")
        return "ERROR", False
